import streamlit as st
from typing import Dict, List
from src.apps.local_event_discovery_and_review import backend
from src.llm.gemini_text import generate_content
from src.config.client import initialize_genai_client

gemini_client = initialize_genai_client()
MODEL_ID = "gemini-2.0-flash-exp"

def process_with_gemini(prompt: str) -> str:
    """
    Processes text using the Gemini model.

    Args:
        prompt (str): The input prompt for the Gemini model.

    Returns:
        str: The text generated by the Gemini model.
    """
    response = generate_content(gemini_client, MODEL_ID, prompt)
    return response.text


def main():
    """
    Primary entry point for the Streamlit application.
    Responsibilities:
    - Configure and render the user interface
    - Handle user inputs and interactions
    - Process and display data from backend
    - Format JSON responses using Gemini
    """
    st.title("Local Event Discovery and Review")
    st.markdown("Discover local businesses and related YouTube reviews!")
    
    location = st.text_input("Enter Location (e.g., 'San Francisco, CA')", value="San Francisco, CA")
    search_term = st.text_input("Enter Search Term (e.g., 'pizza')", value="restaurants")

    if st.button("Search"):
        if not location or not search_term:
            st.error("Please enter both location and search term.")
            return
            
        with st.spinner("Searching Yelp..."):
            yelp_results = backend.search_yelp(location, search_term)
        
        if not yelp_results or "error" in yelp_results:
             st.error(f"Error fetching Yelp results: {yelp_results.get('error', 'Unknown error')}")
             return
        
        st.subheader("Yelp Results")
        if yelp_results and "organic_results" in yelp_results:
            for result in yelp_results["organic_results"]:
                    
                st.markdown(f"**{result.get('title', 'N/A')}**")
                st.markdown(f"Rating: {result.get('rating', 'N/A')}")
                st.markdown(f"Address: {result.get('address', 'N/A')}")
                
                business_name = result.get('title', 'N/A')
                
                with st.spinner(f"Searching YouTube for reviews of {business_name}..."):
                     youtube_results = backend.search_youtube(business_name)
                
                if youtube_results and "video_results" in youtube_results:
                   st.markdown(f"**YouTube Reviews for {business_name}**")
                   for video in youtube_results["video_results"]:
                        st.markdown(f"- [{video.get('title', 'N/A')}]({video.get('link', '#')}) by {video.get('channel', 'N/A')}")
                else:
                    st.warning(f"No YouTube reviews found for {business_name}.")
        else:
             st.warning("No Yelp results found.")

if __name__ == "__main__":
    main()