You have some application ideas that involve interacting with external APIs. Your goal is to create two Python modules inside `src/apps/{app_name_slug}/`:

1. A **Streamlit frontend** (`frontend.py`) that:
   - Provides a user interface for entering queries or parameters and initiating API calls.
   - Uses **only Streamlit** for the frontend (no other UI frameworks).
   - Imports the backend module as `import src.apps.{app_name_slug}.backend`
   - Displays the results returned by the backend in a user-friendly format (e.g., JSON display).
   - In `frontend.py`, define a function `main()` that:
      - Sets up and runs the entire Streamlit user interface for the app.
      - Calls the backend module to fetch data.
      - Displays the returned data using Streamlit components.


2. A **Python backend** (`backend.py`) that:
   - Contains functions and/or classes to fetch and process data from one or more APIs.
   - Uses only Python standard library modules for making API calls.
   - Includes well-documented code explaining how the API calls are constructed and processed.
   - Returns structured Python data to be displayed by the frontend, without running a server.
   - avoid using  urllib instead use requests 
   - avoid creating servers like using flask, fastapi, socketserver etc

**Given Ideas:**
{ideas_text}

**Database of Available APIs:**
{entries_text}

**Return Instructions:**
- Return your code in plain text with the following markers:
  ---BEGIN FRONTEND CODE---
  # frontend code here
  ---END FRONTEND CODE---

  ---BEGIN BACKEND CODE---
  # backend code here
  ---END BACKEND CODE---
  
- Do not include JSON responses outside of code blocks.
- No server code, just API calls and processing.


IMPORTANT: Use Gemini wherever needed like this 

from src.llm.gemini import generate_content 
from src.config.client import initialize_genai_client

gemini_client = initialize_genai_client()
MODEL_ID = "gemini-2.0-flash-exp"
prompt = "<your prompt>"  # come up with a way to take the generated response and convert it into a markdown 

# Generate content
response = generate_content(gemini_client, MODEL_ID, prompt)
text_response = response.text

use gemini especialy if the outputs need to be processed for better rendering pretty




avoid using st.set_page_config


avoid this error at all cost - "The selected app does not have a main() function to run." when i run frontend 


try avoiding Error decoding color palette JSON: Expecting value: line 1 column 1 (char 0)
handle json with care 


The use_column_width parameter has been deprecated and will be removed in a future release. Please utilize the use_container_width parameter instead.


IMPORTANT: AVOID generating ``` 