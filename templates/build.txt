# Application Generation Guidelines

**Objective:**  
Build a modular Python application with a Streamlit frontend and a backend that integrates with an external API using the provided SERP API key. The application should format complex JSON responses using Gemini.

## Directory Structure
Your code will produce two Python modules under `src/apps/{app_name_slug}/`:
1. `frontend.py`
2. `backend.py`

No additional files or extraneous text should be included.

## Code Generation Rules

**Formatting:**
- Start each file with direct Python imports (no extra text, backticks, or Markdown artifacts).
- No `st.set_page_config` usage.
- No floating text outside code blocks.
- Ensure code sections follow the response format exactly.

**Dependencies:**
- Allowed: Standard library, `requests`, `streamlit`.
- Forbidden: Flask, FastAPI, additional UI frameworks, or other external libraries not mentioned.
  
**Documentation:**
- Include docstrings and comments **inside** the code only.
- Follow PEP 8 style guidelines.
- Implement robust error handling and logging.
- Use `from src.config.logging import logger` for logging.

## Frontend (`frontend.py`)

**Requirements:**
- Use Streamlit exclusively.
- Import backend via `from src.apps.{app_name_slug} import backend`.
- Build an intuitive user interface for interacting with the API.
- Display results in a user-friendly format.
- Use Gemini to prettify and format JSON responses.  
  - Gemini integration: 

    from src.llm.gemini_text import generate_content
    from src.config.setup import initialize_genai_client

    gemini_client = initialize_genai_client()
    MODEL_ID = "gemini-2.0-flash-exp"

    def process_with_gemini(prompt: str) -> str:
        response = generate_content(gemini_client, MODEL_ID, prompt)
        return response.text

**UI Guidelines:**
- Strictly DO NOT use `use_column_width`or use `use_container_width` for layout elements.
- Handle JSON data with appropriate error handling.
- Provide a top-level `main()` function that configures the UI and handles user interactions.

def main():
    """
    Primary entry point for the Streamlit application.
    Responsibilities:
    - Configure and render the user interface
    - Handle user inputs and interactions
    - Process and display data from backend
    - Format JSON responses using Gemini
    """

## Backend (`backend.py`)

**Requirements:**
- Use `requests` for external API calls.
- Import `get_serp_api_key` from `src.config.setup` to retrieve the SERP API key.
- Implement API logic with proper error handling.
- Return structured Python dictionaries suitable for frontend consumption.
- No server implementations (like Flask or FastAPI).
- Include comprehensive docstrings and comments.
- Cache responses if appropriate, and validate data thoroughly.

from src.config.setup import get_serp_api_key
# Use get_api_key() to fetch the SERP API key

**API Interaction Guidelines:**
- Validate responses from the external API.
- Handle network and data errors gracefully.
- Return clean, user-friendly data structures.

## Input Parameters
- `{ideas_text}`: Application ideas to implement.
- `{entries_text}`: Available API specifications.

## Response Format
Your response must follow this structure exactly:

---BEGIN FRONTEND CODE---
[Complete frontend.py code here, starting with imports, no extra text]
---END FRONTEND CODE---

---BEGIN BACKEND CODE---
[Complete backend.py code here, starting with imports, no extra text]
---END BACKEND CODE---

## Important Considerations
1. Focus on maintainable, well-documented code
2. Implement comprehensive error handling
3. Optimize for performance and user experience
4. Follow Python best practices and PEP 8
5. Ensure secure API handling practices
6. Provide clear code documentation
7. Include type hints where beneficial
8. Use Gemini for formatting complex data structures
9. Start files directly with imports - no headers or floating text

## Restrictions
* No server-side implementations
* No external UI frameworks
* No raw JSON responses outside code blocks
* No deprecated Streamlit parameters
* Avoid using unexpected keyword arguments
* No floating text or backticks
* No markdown artifacts in generated code

### Example: Correct vs Incorrect Code Generation
❌ INCORRECT imports (external dependency dotenv in imports):
import requests
from typing import Dict, Optional
from dotenv import load_dotenv  

❌ INCORRECT imports (external dependency geopy in imports):
import requests
from typing import Dict, Optional
from geopy.geocoders import Nominatim


IMPORTANT: FORMAT JSON DATA APPROPRIATELY IN THE STREAMLIT UI INSTEAD OF DISPLAYING RAW JSON.

STRICTLY AVOID USING ``` AT ALL COST WHEN GENERATING CODE 

STRICTLY AVOID USING KEYWORD python AT ALL COST WHEN GENERATING CODE 

STRICTLY MAKE SURE TO INCLUDE if __name__ == "__main__" in the frontend.py 


WHEN PRESENTING RESULTS KEEP IT SUMMARIZED CRISP AND SHOW TOP 5 RELEVANT THINGS - RATHER THAN SHOWING EVERYTHING


IMPORTANT => AVOID LONG SCROLLABLE LISTS - INSTEAD SHOW SIDE BY SIDE SHORT PERFECTLY FORMATED TABLES 
USE SUMMARIES WHEREVER NEEDED 