# Application Generation Guidelines

## Overview
You will create a modular Python application that interacts with external APIs. The application will be structured in two core modules under `src/apps/{app_name_slug}/`.

## Code Generation Rules
### Critical Formatting Requirements
* Do not include any floating or standalone text (e.g., "python", "```", "`") at the start or end of files
* Begin code directly with proper Python imports - no header text
* Ensure no stray backticks or markdown artifacts appear in the generated code
* Maintain clean file transitions between frontend and backend code blocks
* Include docstrings and comments within the code, not as external text

## Module Requirements

### 1. Streamlit Frontend (`frontend.py`)
#### Core Requirements
* Create an intuitive user interface for API interactions
* Utilize Streamlit exclusively (no alternative frameworks)
* Import backend via `from src.apps.{app_name_slug} import backend`
* Present API results in human-friendly formats
* Use Gemini for formatting complex JSON responses

#### Main Function Structure
```python
def main():
    """
    Primary entry point for the Streamlit application.
    Responsibilities:
    - Configure and render the user interface
    - Handle user inputs and interactions
    - Process and display data from backend
    - Format JSON responses using Gemini
    """
```

#### Design Guidelines
* DO NOT use `use_column_width` for responsive layouts instead ALWAYS use `use_container_width`
* Avoid `st.set_page_config` usage
* Handle JSON data safely with proper error handling
* Structure the UI for optimal user experience
* Use Gemini to prettify API responses before display

### 2. Backend Module (`backend.py`)
#### Core Requirements
* Implement API interaction logic
* Use Python standard library + requests library
* Include comprehensive documentation
* Return structured data objects
* No server implementations (Flask/FastAPI prohibited)

#### API Integration Guidelines
* Prefer `requests` over `urllib`
* Implement proper error handling
* Cache responses when appropriate
* Validate API responses
* Return clean Python dictionaries for frontend processing

## Gemini Integration
### Required Imports
```python
from src.llm.gemini import generate_content
from src.config.client import initialize_genai_client
```

### Usage Template
```python
gemini_client = initialize_genai_client()
MODEL_ID = "gemini-2.0-flash-exp"

def process_with_gemini(prompt: str) -> str:
    """
    Process content through Gemini and format as markdown.
    
    Args:
        prompt (str): Input prompt for Gemini
        
    Returns:
        str: Formatted markdown response
    """
    response = generate_content(gemini_client, MODEL_ID, prompt)
    return response.text
```

## Input Parameters
* Application ideas to implement:
`{ideas_text}`

* Available API specifications:
`{entries_text}`

## Response Format
Your response must follow this exact structure with no additional text:

```
---BEGIN FRONTEND CODE---
[Complete frontend implementation starting with imports]
---END FRONTEND CODE---

---BEGIN BACKEND CODE---
[Complete backend implementation starting with imports]
---END BACKEND CODE---
```

## Important Considerations
1. Focus on maintainable, well-documented code
2. Implement comprehensive error handling
3. Optimize for performance and user experience
4. Follow Python best practices and PEP 8
5. Ensure secure API handling practices
6. Provide clear code documentation
7. Include type hints where beneficial
8. Use Gemini for formatting complex data structures
9. Start files directly with imports - no headers or floating text

## Restrictions
* No server-side implementations
* No external UI frameworks
* No raw JSON responses outside code blocks
* No deprecated Streamlit parameters 
* Avoid using unexpected keyword args like 
* Replace `use_container_width` with  `use_container_width`
* No floating text or backticks
* No markdown artifacts in generated code


### Example: Correct vs Incorrect Code Generation

❌ INCORRECT (with floating text and backticks):
```
python
```python
import streamlit as st
```

def main():
    st.title("My App")
```

✅ CORRECT:
```
---BEGIN FRONTEND CODE---
import streamlit as st
from typing import Dict, List
from src.apps.weather_app import backend

def main():
    st.title("My App")
    
if __name__ == "__main__":
    main()
---END FRONTEND CODE---
```

❌ INCORRECT (with stray backticks and comments outside code):
```
This is a weather app
`
import streamlit as st
# This is the main function
`
def main():
    st.title("Weather App")
```

✅ CORRECT:
```
---BEGIN FRONTEND CODE---
import streamlit as st
from typing import Dict, List
from src.apps.weather_app import backend

def main():
    """
    Main function for the Weather App interface.
    Handles user input and displays weather data.
    """
    st.title("Weather App")
    
if __name__ == "__main__":
    main()
---END FRONTEND CODE---
```

❌ INCORRECT imports (external dependency dotenv in imports):
import requests
from typing import Dict, Optional
from dotenv import load_dotenv  


❌ INCORRECT imports (external dependency geopy in imports):
import requests
from typing import Dict, Optional
from geopy.geocoders import Nominatim